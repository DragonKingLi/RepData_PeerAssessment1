x <- data.frame(foo=1:4, bar=c(T,T,F,F))
x
as.matrix(x)
data.matrix(x)
x <- c(1:3)
names(x) <- c(a, b, c)
names(x) <- c("a", "b", "c")
x
x <-1:6
x<-c(2,3)
x
x <-1:6
x <-[2,3]
x <-1:6
dim(x)<-c(2,3)
x
names(x) <- c("a", "b","c")
x
colnames(x) <- c("a", "b", "c")
x
rownames(x) <- c("a", "b")
x
x <- data.frame(foo=1:4, bar=c(T,T,F,F))
names(x) <- c("a", "b")
x
row.names(x) <- c("a", "b", "c", "d")
x
q()
install.packages("swirl")
install.packages("swirl")
q()
getwd()
ls()
list.files()
ls()
setwd(./R)
setwd(./Documents/R)
setwd("./Documents/R")
setwd(./Documents/R)
setwd(/Documents/R)
setwd(,/Documents/R)
setwd(./R)
setwd(~/R)
library(data.table)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl, destfile="./microdata3.csv")
DT <- fread("./microdata3.csv")
file.info("./microdata3.csv")$size
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT[DT$SEX==1,]$pwgtp15))+system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(rowMeans(DT)[DT$SEX==1])+system.time(rowMeans(DT)[DT$SEX==2]
)
install.packages("data.table")
library(data.table)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl, destfile="./microdata3.csv")
DT <- fread("./microdata3.csv")
file.info("./microdata3.csv")$size
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT[DT$SEX==1,]$pwgtp15))+system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(rowMeans(DT)[DT$SEX==1])+system.time(rowMeans(DT)[DT$SEX==2]
)
install.packages("RMySQL")
install.packages("RMySQL", dependencies = FALSE)
ucsDb <- dbConnect (MySQL(), user="genome",
host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;"); dbdisconnet(ucscDb)
ucsDb <- dbConnect (MySQL(), user="genome",
host="genome-mysql.cse.ucsc.edu")
install.packages("RMySQL")
ucsDb <- dbConnect (MySQL(), user="genome",
host="genome-mysql.cse.ucsc.edu")
install.packages("RMySQL",type="source")
ucsDb <- dbConnect (MySQL(), user="genome",
host="genome-mysql.cse.ucsc.edu")
ucsDb <- dbConnect (MySQL(), user="genome",
host="genome-mysql.cse.ucsc.edu")
install.packages("RMySQL", dependencies = FALSE)
ucsDb <- dbConnect (MySQL(), user="genome",
host="genome-mysql.cse.ucsc.edu")
install.packages("RMySQL",type="source")
ucsDb <- dbConnect (MySQL(), user="genome",
host="genome-mysql.cse.ucsc.edu")
library(RMySQL)
host="genome-mysql.cse.ucsc.edu")
host="genome-mysql.cse.ucsc.edu")ucsDb <- dbConnect (MySQL(), user="genome",
ucsDb <- dbConnect (MySQL(), user="genome",
host="genome-mysql.cse.ucsc.edu")
q()
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "56b637a5baffac62cad9",
secret = "8e107541ae1791259e9987d544ca568633da2ebf"myapp <- oauth_app("github",
key = "b63b77d47df09f3b4f06",
secret = "907c53d821a0591d238d7ef0ed153daa876917ef")
myapp <- oauth_app("github",
key = "b63b77d47df09f3b4f06",
secret = "907c53d821a0591d238d7ef0ed153daa876917ef")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("Quiz2",
key = "b63b77d47df09f3b4f06",
secret = "907c53d821a0591d238d7ef0ed153daa876917ef")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
library(httr)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("Quiz2",
key = "b63b77d47df09f3b4f06",
secret = "907c53d821a0591d238d7ef0ed153daa876917ef")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
library(httr)
library(httpuv)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("Quiz2",
key = "b63b77d47df09f3b4f06",
secret = "907c53d821a0591d238d7ef0ed153daa876917ef")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
library(httr)
library(httpuv)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("Quiz2",
key = "b63b77d47df09f3b4f06",
secret = "907c53d821a0591d238d7ef0ed153daa876917ef")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
library(jsonlite)
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
repo <- json2[5]
names(repo)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp,cache=F)
library(httr)
library(httpuv)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("Quiz2",
key = "b63b77d47df09f3b4f06",
secret = "907c53d821a0591d238d7ef0ed153daa876917ef")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp,cache=F)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
stop_for_status(req)
output<-content(req)
list(output[[4]]$name, output[[4]]$created_at)
library(httr)
library(httpuv)
library(jsonlite)
oauth_endpoints("github")
myapp <- oauth_app("Quiz2",
key = "b63b77d47df09f3b4f06",
secret = "907c53d821a0591d238d7ef0ed153daa876917ef")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp,cache=F)
library(httr)
library(httpuv)
library(jsonlite)
oauth_endpoints("github")
myapp <- oauth_app("Quiz2",
key = "b63b77d47df09f3b4f06",
secret = "907c53d821a0591d238d7ef0ed153daa876917ef")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp,cache=F)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp,cache=F)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
output<-content(req)
header(output)
head(output)
subset(output, name=="datasharing",select=c(created_at))
jsondata<-fromJSON(toJSON(output))
subset(jsondata, name=="datasharing",select=c(created_at))
?fromJSON
?toJSON
??toJSON
q()
rm.ls()
install.packages("ggplot2")
library(datasets)
data(cars)
with(cars,plot(speed,dist))
head(cars)
install.packages("lattice")
library(lattice)
library(lattice)
state<- data.frame(state.x77, region=state.region)
xyplot(Life.Exp ~ Income | region, data = state, layout=c(4,1))
library(ggplot2)
data(mpg)
qplot(displ, hwy, data=mpg)
library(datasets)
hist(airquality$Ozone)
with(airquality,plot(Wind, Ozone))
library(datasets)
airquality <-transform(airquality,Month=factor(Month))
boxplot(Ozone ~ Month, airquality,xlab="Month", ylab="Ozone (ppb)")
par("lty")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
par("lwd")
par("lwd")
with(airquality,plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
with(airquality,plot(Wind,Ozone, main = "Ozone and Wind in New York City"))
with(subset(airquality, Month=5), point(Wind, Ozone, col="red"))
with(subset(airquality, Month=5), points(Wind, Ozone, col="red"))
with(airquality,plot(Wind,Ozone, main = "Ozone and Wind in New York City"))
with(subset(airquality, Month=5), points(Wind, Ozone, col="red"))
with(subset(airquality, Month==5), points(Wind, Ozone, col="blue"))
with(subset(airquality, Month==6, points(Wind, Ozone, col="green"))
with(subset(airquality, Month==6), points(Wind, Ozone, col="green"))
with(subset(airquality, Month==6), points(Wind, Ozone, col="green"))
par("pch")
with(airquality,plot(Wind, Ozone, main ="Ozone and Wind in New York City"))
with(airquality,plot(Wind, Ozone, main ="Ozone and Wind in New York City", pch=15))
with(airquality,plot(Wind, Ozone, main ="Ozone and Wind in New York City", pch=2))
model<-lm(Ozone ~ Wind, airquality)
abline(model, lwd=3)
with(airquality,plot(Wind, Ozone, main ="Ozone and Wind in New York City", pch=2))
model <-lm(Ozone ~ Wind, airquality)
abline(model, lwd=3, col = "blue")
par(mfrow = c(1,2))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
})
head(airquality)
par(mfrow = c(1,3), mar=c(4,4,2,1), oma= c(0,0,2,0))
with(airquality, {
plot(Wind, Ozone, main ="Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
PLot(Temp, Ozone, main ="Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
})
par(mfrow = c(1,3), mar=c(4,4,2,1), oma= c(0,0,2,0))
with(airquality, {
plot(Wind, Ozone, main ="Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
Plot(Temp, Ozone, main ="Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
})
par(mfrow = c(1,3), mar=c(4,4,2,1), oma= c(0,0,2,0))
with(airquality, {
plot(Wind, Ozone, main ="Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
plot(Temp, Ozone, main ="Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
})
library(ggplot2)
library(ggplots)
str(mpg)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg,color=drv)
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"))
qplot(hwy, data=mpg, fill=drv)
qplot(hwy, data = mpg, facets=drv~., binwidth=2)
qplot(displ, hwy, data=mg, facets=.~drv)
qplot(displ, hwy, data=mpg, facets=.~drv)
str(maacs)
qplot(displ, hwy, data=mpg, facets=.~drv)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
set.seed(1234)
par(mar=c(0,0,0,0))
x<-rnorm(12, mean=rep(1;3,each=4), sd=0.2)
y<-rnorm(12, mean=rep(c(1,2,1), each =4), sd=0.2)
plot(x,y,col="blue", pc=19, cex=2)
test(x+0.05, y+0.05, labels=as.character(1:12))
set.seed(1234)
par(mar=c(0,0,0,0))
x<-rnorm(12, mean=rep(1:3,each=4), sd=0.2)
y<-rnorm(12, mean=rep(c(1,2,1), each =4), sd=0.2)
plot(x,y,col="blue", pc=19, cex=2)
test(x+0.05, y+0.05, labels=as.character(1:12))
set.seed(1234)
par(mar=c(0,0,0,0))
x<-rnorm(12, mean=rep(1:3,each=4), sd=0.2)
y<-rnorm(12, mean=rep(c(1,2,1), each =4), sd=0.2)
plot(x,y,col="blue", pch=19, cex=2)
test(x+0.05, y+0.05, labels=as.character(1:12))
set.seed(1234)
par(mar=c(0,0,0,0))
x<-rnorm(12, mean=rep(1:3,each=4), sd=0.2)
y<-rnorm(12, mean=rep(c(1,2,1), each =4), sd=0.2)
plot(x,y,col="blue", pch=19, cex=2)
text(x+0.05, y+0.05, labels=as.character(1:12))
dataFrame <- data.frame(x, y)
kmeansObj <- kmeans(dataFrame, centers=3)
names(kmeansObj)
dataFrame <- data.frame(x, y)
kmeansObj <- kmeans(dataFrame, centers=3)
names(kmeansObj)
par(mar=rep(0.2, 4))
plot(x,y,col=kmeansObj$cluster, pch=19, cex=2)
points(kmeansObj$centers, col=1:3, pch=3, cex=3, lwd=3)
set.seed(12345)
par(mar=rep(0.2,4))
dataMatrix<-matrix(rnorm(400), nrow=40)
image(1:10, 1:40, t(dataMatrix)[,nrow(dataMatrix):1])
heatmap(dataMatrix)
set.seed(678910)
for (1 in 1:40) {
coinFlip <- rbinom (1, size =1, prob=0.5)
if (coinFlip) {dataMatrix[i, ] <- dataMatrix[i, ]+rep(c(0,3), each =5)}
}
set.seed(678910)
for (i in 1:40) {
coinFlip <- rbinom (1, size =1, prob=0.5)
if (coinFlip) {dataMatrix[i, ] <- dataMatrix[i, ]+rep(c(0,3), each =5)}
}
image(1:10, 1:40, t(dataMatrix)[,nrow(dataMatrix):1])
heatmap(dataMatrix)
install.packages("RColorBrewer")
library(RColorBrewer)
install.packages("markdown")
time <-format (Sys.time(), "%a %b %d %X %Y")
rand <- rnorm(1)
time <- format(Sys.time(), "%a %b %d %X %Y")
rand <- rnorm(1)
time <- format(Sys.time(), "%a %b %d %X %Y")
rand <- rnorm(1)
time <- format(Sys.time(), "%a %b %d %X %Y")
rand <- rnorm(1)
time <- format(Sys.time(), "%a %b %d %X %Y")
rand <- rnorm(1)
time <- format(Sys.time(), "%a %b %d %X %Y")
rand <- rnorm(1)
time <- format(Sys.time(), "%a %b %d %X %Y")
rand <- rnorm(1)
time <- format(Sys.time(), "%a %b %d %X %Y")
rand <- rnorm(1)
time <- format(Sys.time(), "%a %b %d %X %Y")
rand <- rnorm(1)
getwd()
setwd("./R/RepData_PeerAssessment1")
library(knitr)
knit2html("PA1_template.Rmd")
library(knitr)
knit2html("PA1_template.Rmd")
library(knitr)
knit2html("PA1_template.Rmd")
